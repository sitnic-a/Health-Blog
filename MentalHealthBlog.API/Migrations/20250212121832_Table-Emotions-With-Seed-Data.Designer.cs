// <auto-generated />
using System;
using MentalHealthBlogAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MentalHealthBlogAPI.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250212121832_Table-Emotions-With-Seed-Data")]
    partial class TableEmotionsWithSeedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MentalHealthBlog.API.Models.Emotion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Emotions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Indifferent(Bad)"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Apathetic(Bad)"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Pressured(Bad)"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Rushed(Bad)"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Overwhelmed(Bad)"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Out of control(Bad)"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Sleepy(Bad)"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Unfocused(Bad)"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Shocked(Surprised)"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Dismayed(Surprised)"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Disillusioned(Surprised)"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Perplexed(Surprised)"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Astonished(Surprised)"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Awe(Surprised)"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Eager(Surprised)"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Energetic(Surprised)"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Aroused(Happy)"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Cheeky(Happy)"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Free(Happy)"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Joyful(Happy)"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Curious(Happy)"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Inquisitive(Happy)"
                        },
                        new
                        {
                            Id = 23,
                            Name = "Successful(Happy)"
                        },
                        new
                        {
                            Id = 24,
                            Name = "Confident(Happy)"
                        },
                        new
                        {
                            Id = 25,
                            Name = "Respected(Happy)"
                        },
                        new
                        {
                            Id = 26,
                            Name = "Valued(Happy)"
                        },
                        new
                        {
                            Id = 27,
                            Name = "Courageous(Happy)"
                        },
                        new
                        {
                            Id = 28,
                            Name = "Creative(Happy)"
                        },
                        new
                        {
                            Id = 29,
                            Name = "Loving(Happy)"
                        },
                        new
                        {
                            Id = 30,
                            Name = "Thankful(Happy)"
                        },
                        new
                        {
                            Id = 31,
                            Name = "Sensitive(Happy)"
                        },
                        new
                        {
                            Id = 32,
                            Name = "Intimate(Happy)"
                        },
                        new
                        {
                            Id = 33,
                            Name = "Hopeful(Happy)"
                        },
                        new
                        {
                            Id = 34,
                            Name = "Inspired(Happy)"
                        },
                        new
                        {
                            Id = 35,
                            Name = "Betrayed(Angry)"
                        },
                        new
                        {
                            Id = 36,
                            Name = "Resentful(Angry)"
                        },
                        new
                        {
                            Id = 37,
                            Name = "Disrespected(Angry)"
                        },
                        new
                        {
                            Id = 38,
                            Name = "Ridiculed(Angry)"
                        },
                        new
                        {
                            Id = 39,
                            Name = "Indignant(Angry)"
                        },
                        new
                        {
                            Id = 40,
                            Name = "Violated(Angry)"
                        },
                        new
                        {
                            Id = 41,
                            Name = "Furious(Angry)"
                        },
                        new
                        {
                            Id = 42,
                            Name = "Jealous(Angry)"
                        },
                        new
                        {
                            Id = 43,
                            Name = "Provoked(Angry)"
                        },
                        new
                        {
                            Id = 44,
                            Name = "Hostile(Angry)"
                        },
                        new
                        {
                            Id = 45,
                            Name = "Infuriated(Angry)"
                        },
                        new
                        {
                            Id = 46,
                            Name = "Annoyed(Angry)"
                        },
                        new
                        {
                            Id = 47,
                            Name = "Withdrawn(Angry)"
                        },
                        new
                        {
                            Id = 48,
                            Name = "Numb(Angry)"
                        },
                        new
                        {
                            Id = 49,
                            Name = "Skeptical(Angry)"
                        },
                        new
                        {
                            Id = 50,
                            Name = "Dismissive(Angry)"
                        },
                        new
                        {
                            Id = 51,
                            Name = "Isolated(Sad)"
                        },
                        new
                        {
                            Id = 52,
                            Name = "Abandoned(Sad)"
                        },
                        new
                        {
                            Id = 53,
                            Name = "Victimized(Sad)"
                        },
                        new
                        {
                            Id = 54,
                            Name = "Fragile(Sad)"
                        },
                        new
                        {
                            Id = 55,
                            Name = "Grief(Sad)"
                        },
                        new
                        {
                            Id = 56,
                            Name = "Powerless(Sad)"
                        },
                        new
                        {
                            Id = 57,
                            Name = "Ashamed(Sad)"
                        },
                        new
                        {
                            Id = 58,
                            Name = "Remorseful(Sad)"
                        },
                        new
                        {
                            Id = 59,
                            Name = "Empty(Sad)"
                        },
                        new
                        {
                            Id = 60,
                            Name = "Inferior(Sad)"
                        },
                        new
                        {
                            Id = 61,
                            Name = "Disappointed(Sad)"
                        },
                        new
                        {
                            Id = 62,
                            Name = "Embarrassed(Sad)"
                        },
                        new
                        {
                            Id = 63,
                            Name = "Judgmental(Disgusted)"
                        },
                        new
                        {
                            Id = 64,
                            Name = "Embarrassed(Disgusted)"
                        },
                        new
                        {
                            Id = 65,
                            Name = "Appalled(Disgusted)"
                        },
                        new
                        {
                            Id = 66,
                            Name = "Revolted(Disgusted)"
                        },
                        new
                        {
                            Id = 67,
                            Name = "Nauseated(Disgusted)"
                        },
                        new
                        {
                            Id = 68,
                            Name = "Detestable(Disgusted)"
                        },
                        new
                        {
                            Id = 69,
                            Name = "Horrified(Disgusted)"
                        },
                        new
                        {
                            Id = 70,
                            Name = "Hesitant(Disgusted)"
                        },
                        new
                        {
                            Id = 71,
                            Name = "Helpless(Fearful)"
                        },
                        new
                        {
                            Id = 72,
                            Name = "Frightened(Fearful)"
                        },
                        new
                        {
                            Id = 73,
                            Name = "Overwhelmed(Fearful)"
                        },
                        new
                        {
                            Id = 74,
                            Name = "Worried(Fearful)"
                        },
                        new
                        {
                            Id = 75,
                            Name = "Inadequate(Fearful)"
                        },
                        new
                        {
                            Id = 76,
                            Name = "Inferior(Fearful)"
                        },
                        new
                        {
                            Id = 77,
                            Name = "Worthless(Fearful)"
                        },
                        new
                        {
                            Id = 78,
                            Name = "Insignificant(Fearful)"
                        },
                        new
                        {
                            Id = 79,
                            Name = "Excluded(Fearful)"
                        },
                        new
                        {
                            Id = 80,
                            Name = "Persecuted(Fearful)"
                        },
                        new
                        {
                            Id = 81,
                            Name = "Nervous(Fearful)"
                        },
                        new
                        {
                            Id = 82,
                            Name = "Exposed(Fearful)"
                        });
                });

            modelBuilder.Entity("MentalHealthBlog.API.Models.MentalHealthExpert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRejected")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Organization")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PhotoAsFile")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PhotoAsPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("MentalHealthExperts");
                });

            modelBuilder.Entity("MentalHealthBlog.API.Models.PostTag", b =>
                {
                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("PostId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("PostsTags");
                });

            modelBuilder.Entity("MentalHealthBlog.API.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Administrator"
                        },
                        new
                        {
                            Id = 2,
                            Name = "User"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Parent"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Psychologist / Psychotherapist"
                        });
                });

            modelBuilder.Entity("MentalHealthBlog.API.Models.Share", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ShareGuid")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SharedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("SharedPostId")
                        .HasColumnType("int");

                    b.Property<int?>("SharedWithId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SharedPostId");

                    b.HasIndex("SharedWithId");

                    b.ToTable("Shares");
                });

            modelBuilder.Entity("MentalHealthBlog.API.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Ljubav"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Porodica"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Posao"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Zdravlje"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Prijatelji"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Karijera"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Novac"
                        });
                });

            modelBuilder.Entity("MentalHealthBlog.API.Models.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("MentalHealthBlogAPI.Models.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Content_T01",
                            CreatedAt = new DateTime(2025, 2, 12, 13, 18, 32, 742, DateTimeKind.Local).AddTicks(1785),
                            Title = "Title_01",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Content = "Content_T02",
                            CreatedAt = new DateTime(2025, 2, 12, 13, 18, 32, 742, DateTimeKind.Local).AddTicks(1838),
                            Title = "Title_02",
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            Content = "Content_T03",
                            CreatedAt = new DateTime(2025, 2, 12, 13, 18, 32, 742, DateTimeKind.Local).AddTicks(1839),
                            Title = "Title_03",
                            UserId = 2
                        },
                        new
                        {
                            Id = 4,
                            Content = "Content_T04",
                            CreatedAt = new DateTime(2025, 2, 12, 13, 18, 32, 742, DateTimeKind.Local).AddTicks(1840),
                            Title = "Title_04",
                            UserId = 2
                        },
                        new
                        {
                            Id = 5,
                            Content = "Content_T05",
                            CreatedAt = new DateTime(2025, 2, 12, 13, 18, 32, 742, DateTimeKind.Local).AddTicks(1842),
                            Title = "Title_05",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("MentalHealthBlogAPI.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PasswordHash = "TT1",
                            PasswordSalt = new byte[] { 83, 101, 116, 66, 121, 116, 101, 115, 95, 84, 84, 49 },
                            Username = "test_01"
                        },
                        new
                        {
                            Id = 2,
                            PasswordHash = "TT2",
                            PasswordSalt = new byte[] { 83, 101, 116, 66, 121, 116, 101, 115, 95, 84, 84, 50 },
                            Username = "test_02"
                        },
                        new
                        {
                            Id = 3,
                            PasswordHash = "TT3",
                            PasswordSalt = new byte[] { 83, 101, 116, 66, 121, 116, 101, 115, 95, 84, 84, 51 },
                            Username = "test_03"
                        },
                        new
                        {
                            Id = 4,
                            PasswordHash = "TT4",
                            PasswordSalt = new byte[] { 83, 101, 116, 66, 121, 116, 101, 115, 95, 84, 84, 52 },
                            Username = "test_04"
                        });
                });

            modelBuilder.Entity("MentalHealthBlog.API.Models.MentalHealthExpert", b =>
                {
                    b.HasOne("MentalHealthBlogAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MentalHealthBlog.API.Models.PostTag", b =>
                {
                    b.HasOne("MentalHealthBlogAPI.Models.Post", "Post")
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MentalHealthBlog.API.Models.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("MentalHealthBlog.API.Models.Share", b =>
                {
                    b.HasOne("MentalHealthBlogAPI.Models.Post", "SharedPost")
                        .WithMany()
                        .HasForeignKey("SharedPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MentalHealthBlogAPI.Models.User", "SharedWith")
                        .WithMany()
                        .HasForeignKey("SharedWithId");

                    b.Navigation("SharedPost");

                    b.Navigation("SharedWith");
                });

            modelBuilder.Entity("MentalHealthBlog.API.Models.UserRole", b =>
                {
                    b.HasOne("MentalHealthBlog.API.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MentalHealthBlogAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MentalHealthBlogAPI.Models.Post", b =>
                {
                    b.HasOne("MentalHealthBlogAPI.Models.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MentalHealthBlogAPI.Models.User", b =>
                {
                    b.Navigation("Posts");
                });
#pragma warning restore 612, 618
        }
    }
}
